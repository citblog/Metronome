#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/sleep.h>

// Определение частоты тактирования
#define F_CPU 4800000UL

// Определение частоты звука и паузы
#define SOUND_FREQUENCY 4000
#define SOUND_DURATION 500 // 0.5 секунды
#define PAUSE_DURATION 6500 // 6.5 секунды

// Вычисление необходимого делителя для достижения заданной частоты
#define PRESCALER ((F_CPU / (2 * SOUND_FREQUENCY)) - 1)

// Счетчики длительности звука и паузы
volatile uint16_t sound_counter = 0;
volatile uint16_t pause_counter = 0;

// Счетчик циклов
volatile uint8_t loop_counter = 0;

// Флаги для кнопок
volatile uint8_t start_flag = 0;
volatile uint8_t stop_flag = 0;

int main(void) {
    // Настройка порта для генерации звука
    DDRB |= (1 << PB1);

    // Настройка порта для кнопок
    DDRB &= ~((1 << PB2) | (1 << PB3));
    PORTB |= (1 << PB2) | (1 << PB3); // Включение внутренних подтягивающих резисторов

    // Настройка таймера
    TCCR1B |= (1 << WGM12); // Режим CTC с предделителем на 64
    TCCR1B |= (1 << CS10) | (1 << CS11);
    OCR1A = PRESCALER;

    // Включение прерывания по совпадению таймера с регистром сравнения
    TIMSK |= (1 << OCIE1A);

    // Включение прерывания при изменении состояния кнопок
    PCMSK |= (1 << PCINT2) | (1 << PCINT3);
    GIMSK |= (1 << PCIE);

    // Включение глобального разрешения прерываний
    sei();

    while (1) {
        if (start_flag) {
            if (sound_counter < SOUND_DURATION) {
                // Генерация звука
                PORTB ^= (1 << PB1);
            } else if (pause_counter < PAUSE_DURATION) {
                // Пауза между звуками
                PORTB &= ~(1 << PB1); // Отключение звука
            } else {
                // Сброс счетчиков и увеличение счетчика циклов
                sound_counter = 0;
                pause_counter = 0;
                loop_counter++;
            }
        } else if (stop_flag) {
            // Выключение порта для генерации звука
            PORTB &= ~(1 << PB1);

            // Перевод микроконтроллера в спящий режим
            set_sleep_mode(SLEEP_MODE_PWR_DOWN);
            sleep_enable();
            sleep_mode();
        }
    }
}

// Обработчик прерывания по изменению состояния порта B (кнопки)
ISR(PCINT0_vect) {
    // Проверка состояния кнопки 1
    if (!(PINB & (1 << PB2))) {
        start_flag = 1;
        stop_flag = 0;
    }

    // Проверка состояния кнопки 2
    if (!(PINB & (1 << PB3))) {
        start_flag = 0;
        stop_flag = 1;
    }
}

// Обработчик прерывания таймера
ISR(TIMER1_COMPA_vect) {
    // Увеличение счетчиков
    sound_counter++;
    pause_counter++;
}

В этом коде добавлены два внешних прерывания для обработки изменений состояния кнопок PB2 и PB3. 
Если кнопка PB2 нажимается, устанавливается флаг start_flag, что пробуждает контроллер и запускает 
выполнение программы. Если кнопка PB3 нажимается, устанавливается флаг stop_flag, что вызывает 
остановку выполнения и переводит микроконтроллер в спячку. Проверка этих флагов происходит в 
основном цикле программы.
