#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/sleep.h>
#include <util/delay.h>

#define F_CPU 4800000UL
#define F_PWM 4000UL   // Желаемая частота звука в Гц

volatile uint8_t play_sound = 0;  // Флаг воспроизведения звука
volatile uint8_t cycle_count = 0; // Счетчик циклов
volatile uint8_t sleep_flag = 0;  // Флаг спящего режима

void setup_PWM() {
    // Настройка регистра TCCR0A для режима Fast PWM
    TCCR0A |= (1 << WGM01) | (1 << WGM00);

    // Настройка регистра TCCR0A и TCCR0B для установки предделителя 64
    TCCR0B |= (1 << CS01) | (1 << CS00);

    // Вычисление и установка значения OCR0A для получения нужной частоты сигнала
    uint8_t ocr_value = (F_CPU / (F_PWM * 64)) - 1;
    OCR0A = ocr_value;

    // Включение прерывания при совпадении OCR0A с счётчиком TCNT0
    TIMSK0 |= (1 << OCIE0A);

    // Включение глобального прерывания
    sei();
}

void setup_timer1() {
    // Настройка регистра TCCR1B для установки предделителя 256
    TCCR1B |= (1 << CS12);

    // Вычисление и установка значения OCR1A для задержки времени между циклами
    // Время задержки = (OCR1A * (1/4800000)) секунд
    OCR1A = 15624; // 6.5 секунд (либо 0.5 секунды на 8-битном таймере)

    // Включение прерывания при совпадении OCR1A с счётчиком TCNT1
    TIMSK1 |= (1 << OCIE1A);
}

void setup_interrupts() {
    DDRB &= ~(1 << PB1); // Установка входа PB1 (кнопка 1)
    PORTB |= (1 << PB1); // Включение подтягивающего резистора

    DDRB &= ~(1 << PB2); // Установка входа PB2 (кнопка 2)
    PORTB |= (1 << PB2); // Включение подтягивающего резистора

    PCICR |= (1 << PCIE0); // Разрешение прерывания PCINT0
    PCMSK0 |= (1 << PCINT1) | (1 << PCINT2); // Разрешение прерывания для PB1 и PB2
    sei(); // Разрешение прерываний
}

int main(void) {
    setup_PWM();
    setup_timer1();
    setup_interrupts();

    // Включение порта PB0 как выход
    DDRB |= (1 << PB0);

    while (cycle_count < 100) {
        if (play_sound) {
            // Включение звука
            PORTB |= (1 << PB0);

            // Задержка на 0.5 секунды
            _delay_ms(500);

            // Выключение звука
            PORTB &= ~(1 << PB0);

            // Сброс флага воспроизведения звука
            play_sound = 0;
        }

        if (sleep_flag) {
            // Остановка звука
            PORTB &= ~(1 << PB0);

            // Вход в спящий режим
            set_sleep_mode(SLEEP_MODE_PWR_DOWN);
            sleep_mode();
        }
    }

    while (1) {
        // Программа завершена
    }
}

// Обработчик прерывания для звука
ISR(TIM0_COMPA_vect) {
    // Включение звука
    PORTB |= (1 << PB0);

    // Отключение прерываний
    cli();

    // Задержка на 0.5 секунды
    _delay_ms(500);

    // Выключение звука
    PORTB &= ~(1 << PB0);

    // Установка флага воспроизведения звука
    play_sound = 1;
}

// Обработчик прерывания для таймера 1
ISR(TIM1_COMPA_vect) {
    // Увеличение счетчика циклов
    cycle_count++;

    // Остановка таймера 1
    TCCR1B &= ~(1 << CS12);

    // Сброс счетчика таймера 1
    TCNT1 = 0;
}

// Обработчик прерывания для кнопок
ISR(PCINT0_vect) {
    // Проверка состояния кнопки 1
    if (!(PINB & (1 << PB1))) {
        // Пробуждение микроконтроллера и запуск программы
        sleep_disable();
        sleep_flag = 0;
    }

    // Проверка состояния кнопки 2
    if (!(PINB & (1 << PB2))) {
        // Остановка выполнения и перевод микроконтроллера в спячку
        sleep_flag = 1;
        set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    }
}

В данной программе добавлены обработчики прерываний для двух кнопок (PB1 и PB2). Нажатие на первую кнопку пробуждает 
микроконтроллер и запускает программу. Нажатие на вторую кнопку останавливает выполнение программы и переводит 
микроконтроллер в режим спячки.

